/*ввод с клавиатуры да1Н1ых в массив, состоящий из восьми элементов тина
ZNAK; записи должны быть упорядочены по датам дней рождения;
• вывод на экран информации о людях, родившихся под знаком, наименование которого введено с клавиатуры;
• если таких нет, выдать на дисплей соответствующее сообщение. */

#include <conio.h>
#include <iostream>
#include<cmath>
#include<ctype.h>
using std::cout;
using std::cin;
using std::endl;
struct ZNAK
{
    char name[100];
    char secname[100];
    char sign[100];
    int dateofbirth [3];
   
};
void* fillstruct(ZNAK* person);
void* comparestruct(ZNAK* person);
int menu();
void changeperson(ZNAK* person, int numb);
int main()
{
    ZNAK person[2];
    fillstruct(person);
    char sign1[100];
    
    comparestruct(person);
    int check1 = 0;

    system("cls");
    int result=0;
    do {
        result = menu();
        switch (result) {
        case(0):
            int numb;
            cout << "Enter the user's number: " << endl;
            cin >> numb;
            cout << endl;
            changeperson(person, numb);
            system("cls");
            break;
        case (1) :
                cout << "Enter zodiac sign" << endl;
                cin >> sign1;
                cout << endl;
                for (int i = 0; i < 2; i++)
                {
                    if (*person[i].sign == *sign1)
                    {
                        check1++;
                        cout << "Name: " << person[i].name << endl;
                        cout << "Surname: " << person[i].secname << endl;
                        cout << "Sign: " << person[i].sign << endl;
                        cout << "Date of birth: ";
                        for (int j = 0; j < 3; j++) {
                            cout << person[i].dateofbirth[j] << ".";
                        }
                        cout << endl;
                    }
                }

                if (check1 == 0)
                    cout << "There are no people with this sign ";
                break;
            };
        
    } while (result != 2);
    return 0;
}
void* fillstruct(ZNAK* person)
{

    for (int i = 0; i < 2; i++) {
        int check = 0;
        do {
            check = 0;
            int k = 0;
            cout << "Enter name of the person" << endl;
            cin >> person[i].name;
            for (k = 0; person[i].name[k] != '\0'; k++) {
                if (isalpha(person[i].name[k]) == 0) {
                    cin.clear();
                    cin.ignore();
                    check++;
                }
            }


            cout << endl;
            cout << "Enter surname of the person" << endl;
            cin >> person[i].secname;
            for (k = 0; person[i].secname[k] != '\0'; k++) {
                if (isalpha(person[i].secname[k]) == 0) {
                    cin.clear();
                    cin.ignore();
                    check++;
                }
            }
            cout << endl;
            cout << "Enter sign of the person" << endl;
            cin >> person[i].sign;
            for (k = 0; person[i].sign[k] != '\0'; k++) {
                if (isalpha(person[i].sign[k]) == 0) {
                    cin.clear();
                    cin.ignore();
                    check++;
                }
            }
            cout << endl;
            cout << "Enter date of birth of the person(day,month,year)" << endl;

            for (int j = 0; j < 3; j++)
            {

                cin >> person[i].dateofbirth[j];

            }
            cout << endl;
            if (check > 0)
            {
                system("cls");
                cout << "Can't add this user to database" << endl;
            }
        } while (check > 0);
    }
    return 0;
};
void* comparestruct(ZNAK* person)
{
    for (int i = 0; i < 1; i++)
    {
        for (int j = i + 1; j < 2; j++)
        {
            if (person[i].dateofbirth[2] > person[j].dateofbirth[2])
            {
                ZNAK temp = person[i];
                person[i] = person[j];
                person[j] = temp;
            }
            else if (person[i].dateofbirth[2] == person[j].dateofbirth[2] && person[i].dateofbirth[1] > person[j].dateofbirth[1])
            {
                ZNAK temp = person[i];
                person[i] = person[j];
                person[j] = temp;
            }
            else if (person[i].dateofbirth[2] == person[j].dateofbirth[2] && person[i].dateofbirth[1] == person[j].dateofbirth[1] && person[i].dateofbirth[0] > person[j].dateofbirth[0])
            {
                ZNAK temp = person[i];
                person[i] = person[j];
                person[j] = temp;
            }
        }
    }
    return 0;
}
void changeperson (ZNAK* person, int numb)
{
    int check = 0;
    do {
        check = 0;
        int k = 0;
        cout << "Enter name of the person" << endl;
        cin >> person[numb].name;
        for (k = 0; person[numb].name[k] != '\0'; k++) {
            if (isalpha(person[numb].name[k]) == 0) {
                cin.clear();
                cin.ignore();
                check++;
            }
        }


        cout << endl;
        cout << "Enter surname of the person" << endl;
        cin >> person[numb].secname;
        for (k = 0; person[numb].secname[k] != '\0'; k++) {
            if (isalpha(person[numb].secname[k]) == 0) {
                cin.clear();
                cin.ignore();
                check++;
            }
        }
        cout << endl;
        cout << "Enter sign of the person" << endl;
        cin >> person[numb].sign;
        for (k = 0; person[numb].sign[k] != '\0'; k++) {
            if (isalpha(person[numb].sign[k]) == 0) {
                cin.clear();
                cin.ignore();
                check++;
            }
        }
        cout << endl;
        cout << "Enter date of birth of the person(day,month,year)" << endl;

        for (int j = 0; j < 3; j++)
        {

            cin >> person[numb].dateofbirth[j];

        }
        cout << endl;
        if (check > 0)
        {
            cout << "Can't add this user to database" << endl;
        }
    } while (check > 0);

}
int menu()
{
    int key = 0;
    int code;
    do {
        if (key == 0) cout << "-> Change user." << endl;
        else  cout << "   Change user." << endl;
        if (key == 1) cout << "-> Find person by a sign." << endl;
        else  cout << "   Find person by a sign." << endl;
        if (key == 2) cout << "-> Exit." << endl;
        else  cout << "   Exit." << endl;
        code = _getch();


        if (code == 80) key++;
        if (code == 72) key--;

        if (key == 3) key = 0;
        if (key == -1) key = 2;

        system("cls");
    } while (code != 13);
    system("cls");
    return key;
}
