#include <iostream>
#include <math.h>
#include "conio.h"

using std::cin;
using std::cout;
using std::endl;

typedef struct matrix
{
	int value;
	matrix* next;
	matrix* prev;
	matrix* first;
} *matp, mat;

typedef struct matrixshort
{
	int value;
	matrixshort* next;
	int row;
	int column;
	matrixshort* first;
} *matshortp, matshort;

typedef struct matrixindexshort
{

	int value;
	matrixindexshort* next;
	int column;
	int row;
	matrixindexshort* first;


}*matindexp, matindex;

char* createnumb(char* ch, matp* element, FILE* f1)
{
	(*element)->value = ch[0] - '0';
	fgets(ch, 2, f1);
	while (ch[0] != 32 && !feof(f1) && ch[0] != '\n')
	{
		(*element)->value = (*element)->value * 10 + ch[0] - '0';
		fgets(ch, 2, f1);
	}



	return ch;
}

void readmatrix(matp* matrix1[100], matp element1, matp element2,int* count,char*line)
{
	*count = 0;
	FILE* f1;                                   //open file to scan the matrix
	fopen_s(&f1, line, "r");
	char ch[2];                                 //symbol by symbol
	fseek(f1, 0, SEEK_SET);
	while (!feof(f1))
	{
		fgets(ch, 2, f1);
		if (feof(f1))
		{

			break;
		}
		if (*matrix1[*count] == NULL)
		{
			(*matrix1[*count]) = new mat;
			(*matrix1[*count])->first = (*matrix1[*count]);              //first iteration
			(*matrix1[*count])->prev = NULL;
			createnumb(ch, matrix1[*count], f1);
			element2 = (*matrix1[*count]);
		}
		else
		{
			if (ch[0] > 47 && ch[0] < 58)
			{
				element1 = new mat;
				createnumb(ch, &element1, f1);
				element1->first = element2->first;
				element1->prev = element2;
				element2->next = element1;
				element2 = element1;
			}
		}
		if (ch[0] == '\n')
		{
			(*count)++;
			element1->next = NULL;

		}
	}
	element1->next = NULL;

	for (int i = 0; i <= *count; i++)
	{
		element1 = (*matrix1[i]);
		while (*matrix1[*count])
		{
			cout << element1->value << " ";                      //checkfunc
			if (element1->next == NULL)
				break;
			else
				element1 = element1->next;


		}
		cout << endl;

	}
	fclose(f1);










}

void cohshort(matp* matrix1[100], matp element2, int* count)
{
	matshortp t1 = new matshort;                              //coherent connected line
	matshortp t2 = new matshort;
	t2 = NULL;
	int newcount = 1;
	for (int i = 0; i <= *count; i++)
	{
		element2 = (*matrix1[i]);
		newcount = 1;
		while (element2)
		{
			if (element2->value != 0)
			{

				t1 = new matshort;
				if (t2 == NULL)
					t1->first = t1;
				else
				{
					t1->first = t2->first;
					t2->next = t1;
				}
				t1->value = element2->value;
				t1->column = newcount;
				t1->row = i + 1;
				t2 = t1;
			}
			if (element2->next == NULL)
				break;
			else
			{
				element2 = element2->next;
				newcount++;
			}
		}

	}
	t1->next = NULL;
	t1 = t1->first;
	cout << "-------------------------" << endl;
	while (t1)
	{
		cout << t1->value << " " << "Row=" << t1->row << " " << "Column=" << t1->column << endl;
		if (t1->next == NULL)
			break;
		else
			t1 = t1->next;

	}

	/*element2 = (*matrix1[0]);*/ 
	matp element1 = new mat;
	/*element1 = element2;*/
	for (int i = 0; i <= *count; i++)                 //to delete matrix1
	{
		element2 = (*matrix1[i]);
		element1 = element2;
		while (element1)
		{
			element2 = element1;
			if(element2->next != NULL)
			element1 = element2->next;
			else
			{
				delete element2;
				break;

			}
			delete element2;
		}

	}
	
	
	


}

void fillshortindexmatrix(matindexp* matrix2[100], matp element2,int i, matindexp* elementind1, matindexp* elementind2,int countcolumn,int *countrow)
{
	(*elementind1) = new matindex;
	(*elementind1)->value = element2->value;
	(*elementind1)->column = countcolumn;
	
	int check=-1;
	if ((*elementind2) != NULL)
		check = (*elementind2)->row -1;
	

	if (check!=i)
	{
		check++;
		(*countrow)++;
		(*elementind1)->row = i+1;
		(*elementind1)->first = (*elementind1);
		(*matrix2[*countrow]) = (*elementind1);
		(*elementind2) = (*elementind1);
	}
	else
	{
		(*elementind1)->first = (*elementind2)->first;
		(*elementind2)->next = (*elementind1);
		(*elementind1)->row = i+1;
		(*elementind2) = (*elementind1);
	}


}

void cohshortindex(matp* matrix1[100], int* count)
{
	matindexp* matrix2[100];                                 //CREATE A NEW MASSIVE

	matindexp elementind1 ;
	matindexp elementind2;
	
	matp element1 = new mat;
	matp element2 = new mat;

	int countcolumn = 0;
	int countrow = -1;

	for (int i = 0; i < 100; i++)
	{
		matrix2[i] = new matindexp;
		(*matrix2[i]) = NULL;
	}

	for (int i = 0; i <= *count; i++)
	{
		elementind1 = NULL;
		elementind2 = NULL;

		element2 = (*matrix1[i]);
		element1 = element2;

		while (element1!=NULL)
		{
			countcolumn++;
			element2 = element1;
			if (element2->value != 0)
				fillshortindexmatrix(matrix2, element2, i, &elementind1,&elementind2, countcolumn,&countrow);
	
			if (element2->next != NULL)
				element1 = element2->next;
			else
				if (elementind1 != NULL)
				{
					countcolumn = 0;
					elementind1->next = NULL;                //clear columncount
					countcolumn = 0;
					break;
				}
				else
				{
					countcolumn = 0;
					break;
				}


			
			
		}


	}

	cout << "---------------------" << endl;
	for (int i = 0; i <= countrow; i++)
	{
		elementind1 = (*matrix2[i]);
		while (*matrix2[countrow] )
		{
			cout <<"Row:"<< elementind1 ->row<< "Column:"<< elementind1 ->column<<" "<<elementind1->value << " ";                      //checkfunc change to matrix2
			if (elementind1->next == NULL)
				break;
			else
				elementind1 = elementind1->next;


		}
		cout << endl;

	}
	

}

void additionofmatrixes(matp* matrix1[100], int* count, matp element2, matp element1)
{
	matp* matrix2[100];
	for (int i = 0; i < 100; i++)
	{
		matrix2[i] = new matp;
		(*matrix2[i]) = NULL;
	}
	char line[100] = "matrix2.txt";
	readmatrix(matrix2, element1, element2, count, line);

	system("cls");                                              
	

	for (int i = 0; i <= *count; i++)
	{
		element1 = (*matrix1[i]);
		element2 = (*matrix2[i]);
		while (element1 != NULL && element2 != NULL)
		{
			element1->value = element1->value + element2->value;
			element1 = element1->next;
			element2 = element2->next;
		}
	}

	for (int i = 0; i <= *count; i++)
	{
		element1 = (*matrix1[i]);
		while (*matrix1[*count])
		{
			cout << element1->value << " ";                      //checkfunc
			if (element1->next == NULL)
				break;
			else
				element1 = element1->next;


		}
		cout << endl;
	}

	for (int i = 0; i <= *count; i++)                 //to delete matrix2
	{
		element2 = (*matrix2[i]);
		element1 = element2;
		while (element1)
		{
			element2 = element1;
			if (element2->next != NULL)
				element1 = element2->next;
			else
			{
				delete element2;
				break;

			}
			delete element2;
		}

	}
}

void additionofvalues(matp* matrix1[100], matp* matrix2[100], matp* matrix3[100], int* count, matp element3, matp element2, matp element1)
{
	int val1 = 0, val2 = 0, sum = 0;
	int move = 0, j = 0;
	matp first = element1->first;
	matp element4=NULL;
	element3->prev = NULL;
	element3->first = element3;
	while (move<=*count)
	{
		element2 = (*matrix2[j]);
		while (element1 != NULL)
		{
			element2 = (*matrix2[j]);
			val1 = element1->value;
			for (int i = 0; i < move; i++)
			{
				element2 = element2->next;
			}
			val2 = element2->value;
			sum += val1 * val2;
			element1 = element1->next;
			j++;
		}



		element3->value = sum;
		element3->prev = element4;
		
		if (element3->prev != NULL)
		{
			element3->first = (element3->prev)->first;
			(element3->prev)->next = element3;
		}
		
		
		sum = 0;
		j = 0;

		move++;
		element1 = first;
		element4 = element3;
		if (move <= *count)
			element3 = new mat;
		else
			element3->next = NULL;
	}
	


}

void multiplicationofmatrixes(matp* matrix1[100], int* count, matp element2, matp element1)
{
	matp* matrix2[100];
	for (int i = 0; i < 100; i++)
	{
		matrix2[i] = new matp;
		(*matrix2[i]) = NULL;
	}
	matp* matrix3[100];
	/*for (int i = 0; i < 100; i++)
	{
		matrix3[i] = new matp;
		(*matrix3[i]) = NULL;
	}*/
	char line[100] = "matrix2.txt";
	readmatrix(matrix2, element1, element2, count, line);

	int sum=0;
	int val1 = 0;
	int val2 = 0;
	int move = 0;
	int j = 0;


	for (int i = 0; i <= *count; i++)
	{
		matrix3[i] = new matp;
		matp element3=new mat;
		
		element1 = (*matrix1[i]);

		additionofvalues( matrix1, matrix2,  matrix3,  count, element3, element2, element1);
		
		(*matrix3[i]) = element3;

		
	}
	cout << "---------" << endl;

	for (int i = 0; i <= *count; i++)
	{
		element1 = (*matrix3[i]);
		while (*matrix1[*count])
		{
			cout << element1->value << " ";                      //checkfunc
			if (element1->next == NULL)
				break;
			else
				element1 = element1->next;


		}
		cout << endl;

	}

	for (int i = 0; i <= *count; i++)                 //to delete matrix1
	{
		element2 = (*matrix1[i]);
		element1 = element2;
		while (element1)
		{
			element2 = element1;
			if (element2->next != NULL)
				element1 = element2->next;
			else
			{
				delete element2;
				break;

			}
			delete element2;
		}

	}
	
	
	for (int i = 0; i <= *count; i++)                 //to delete matrix2
	{
		element2 = (*matrix2[i]);
		element1 = element2;
		while (element1)
		{
			element2 = element1;
			if (element2->next != NULL)
				element1 = element2->next;
			else
			{
				delete element2;
				break;

			}
			delete element2;
		}

	}


}

int main()
{
	
	char line[100] = "matrix.txt";             //name of file to open
	
	matp* matrix1[100];
	for (int i = 0; i < 100; i++)
	{
		matrix1[i] = new matp;
		(*matrix1[i]) = NULL;
	}

	int count = 0;
	matp element1 = new mat;
	matp element2 = new mat;
	
	char choice='1';
	while (choice == '1') {
		system("cls");
		cout << "choose 1.Read matrix from file\n2.Short linked list\n3.Short linked index list\n4.Addition of matrixes\n5.Multiplication of matrixes" << endl;
		choice = _getch();
		if (cin.fail())
		{
			cin.ignore(cin.rdbuf()->in_avail());
			cin.clear();
		}
		switch (choice)
		{
		case ('1'):
			readmatrix(matrix1, element1, element2, &count,line);
			break;
		case('2'):
			cohshort(matrix1, element2, &count);
			break;
		case('3'):
			cohshortindex(matrix1, &count);
			break;
		case('4'):
			additionofmatrixes(matrix1, &count, element2, element1);
			break;
		case('5'):
			multiplicationofmatrixes(matrix1, &count, element2, element1);
			break;
		}
		cout << "continue? 1,2" << endl;
		choice = _getch();
		if (cin.fail())
		{
			cin.ignore(cin.rdbuf()->in_avail());
			cin.clear();
		}
	}
	/*readmatrix(matrix1, element1, element2, &count);
	cohshort(matrix1, element2, &count);
	cohshortindex(matrix1, &count);*/

	
	return 0;
}
