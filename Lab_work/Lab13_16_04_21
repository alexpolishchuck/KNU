#include <iostream>
#include <math.h>
#include "conio.h"
#include "functional"

using std::cin;
using std::cout;
using std::endl;
using std::function;

typedef struct jcolumn
{
	int j = -1;
	int value = 0;
	jcolumn* next = NULL;
}*columnp,column;

typedef struct irow
{
	int i = -1;
	jcolumn* column = NULL;
	irow* next = NULL;
}*rowp ,row;

typedef struct verticesarray
{
	int i = -1;
	int value = 0;


}*verarrp,verarr;

typedef struct edgesarray
{
	int i = -1;
	int j = -1;

	int i2 = -1;
	int j2 = -1;             //used for saving coordinates of the second vertice of the edge in the mergesort function

	int value = 0;

}*edarrp,edarr;

typedef struct areaoftriangle
{
	int i = -1;
	int j = -1;
	int k = -1;

	int value = 0;
	areaoftriangle* next = NULL;
}*areap, area;

typedef struct myqueue
{
	int i = -1;
	myqueue* next = NULL;

}*qp, q;




void addvalue(rowp* matrixrow, rowp* firstrow,int i , int j, int value)
{
	rowp previousrow = NULL;

	if ((*firstrow) == NULL)
	{
		(*matrixrow) = new row;
		(*matrixrow)->i = i;
		(*matrixrow)->column = new column;
		(*matrixrow)->column->j = j;
		(*matrixrow)->column->value = value;
		(*firstrow) = (*matrixrow);


	}
	else
	{
		(*matrixrow) = (*firstrow);
		while ((*matrixrow) != NULL)
		{
			if ((*matrixrow)->i == i)
				break;
			else
			{
				previousrow = (*matrixrow);
				(*matrixrow) = (*matrixrow)->next;
			}
		}
		if ((*matrixrow) == NULL)
		{
			(*matrixrow) = new row;
			(*matrixrow)->i = i;
			(*matrixrow)->column = new column;
			(*matrixrow)->column->j = j;
			(*matrixrow)->column->value = value;
			previousrow->next = (*matrixrow);
		}
		else
		{
			columnp matrixcolumn = NULL;
			columnp previouscolumn = NULL;
			matrixcolumn = (*matrixrow)->column;
			while (matrixcolumn != NULL)
			{
				previouscolumn = matrixcolumn;
				matrixcolumn = matrixcolumn->next;
			}

			matrixcolumn = new column;
			matrixcolumn->j = j;
			matrixcolumn->value = value;
			previouscolumn->next = matrixcolumn;

		}

	}


}

void insertionsort(rowp matrixrow, rowp firstrow, int number)
{
	columnp matrixcolumn = NULL;
	verarrp* arrayofvertices = new verarrp [number];
	verarrp element = NULL;

	int count = 0;
	matrixrow = firstrow;
	for (int i = 0; i < number; i++)
	{
		count = 0;
		while (matrixrow->i != i)
			matrixrow = matrixrow->next;
		matrixcolumn = matrixrow->column;
		while (matrixcolumn != NULL)
		{
			if (matrixcolumn->value != 0)
				count++;
			matrixcolumn = matrixcolumn->next;
		}
		element = new verarr;
		element->i = i;
		element->value = count;
		arrayofvertices[i] = element;
	}
	int j = 0;
	for (int i = 1; i < number; i++)
	{
		element = arrayofvertices[i];
		j = i - 1;
		while (j > -1 && element->value < arrayofvertices[j]->value)
		{
			arrayofvertices[j + 1] = arrayofvertices[j];
			arrayofvertices[j] = element;
			j--;

		}



	}

	for (int i = 0; i < number; i++)
	{
		cout<<arrayofvertices[i]->i + 1<< " ";

	}
	for (int i = 0; i < number; i++)
	{
		 delete arrayofvertices[i];

	}
	delete[] arrayofvertices;
	system("pause");                                 
}

void bubblesort(rowp matrixrow, rowp firstrow, int number)
{
	columnp matrixcolumn = NULL;
	verarrp* arrayofvertices = new verarrp[number];
	verarrp element = NULL;

	int count = 0;                                        //summary value of edges
	matrixrow = firstrow;
	for (int i = 0; i < number; i++)
	{
		count = 0;
		while (matrixrow->i != i)
			matrixrow = matrixrow->next;
		matrixcolumn = matrixrow->column;
		while (matrixcolumn != NULL)
		{
			if (matrixcolumn->value != 0)
				count+= matrixcolumn->value;
			matrixcolumn = matrixcolumn->next;
		}
		element = new verarr;
		element->i = i;
		element->value = count;
		arrayofvertices[i] = element;
	}

	for (int i = 0; i < number; i++)
		for (int j = i; j < number; j++)
		{
			if (arrayofvertices[i]->value > arrayofvertices[j]->value)
			{
				element = arrayofvertices[j];
				arrayofvertices[j] = arrayofvertices[i];
				arrayofvertices[i] = element;
			}
	    }

	for (int i = 0; i < number; i++)
	{
		cout << arrayofvertices[i]->i + 1 << " ";

	}
	for (int i = 0; i < number; i++)
	{
		delete arrayofvertices[i];

	}
	delete[] arrayofvertices;
	system("pause");

}

void quicksort(edarrp arrayofedges[],int k)
{
	if (k > 1) {
		edarrp* left = new edarrp[k];
		edarrp* right = new edarrp[k];
		int l = -1, r = -1;

		edarrp pivot = arrayofedges[k / 2];

		for (int i = 0; i <= k; i++)
		{
			if (arrayofedges[i]->value < pivot->value)
			{
				l++;
				left[l] = arrayofedges[i];


			}
			else if (arrayofedges[i]->value > pivot->value)
			{
				r++;
				right[r] = arrayofedges[i];


			}

		}
		quicksort(left, l);
		quicksort(right, r);

		for (int i = 0; i <= k; i++)
		{
			if (i <= l)
			{
				arrayofedges[i] = left[i];


			}
			else if (i == l + 1)
			{
				arrayofedges[i] = pivot;

			}
			else if (i > l + 1)
			{
				arrayofedges[i] = right[i - (l + 2)];


			}

		}
		delete[] left;
		delete[] right;
	}
}

void sortbylengthoftheedges(rowp matrixrow, rowp firstrow, int number)
{
	columnp matrixcolumn = NULL;
	matrixrow = firstrow; 
	edarrp* arrayofedges = new edarrp[number*number];


	int k = -1;
	while (matrixrow != NULL)
	{
		matrixcolumn = matrixrow->column;
		while (matrixcolumn != NULL)
		{
			k++;
			arrayofedges[k] = new edarr;
			arrayofedges[k]->i = matrixrow->i;
			arrayofedges[k]->j = matrixcolumn->j;
			arrayofedges[k]->value = matrixcolumn->value;
			matrixcolumn = matrixcolumn->next;

		}
		matrixrow = matrixrow->next;
	}

	

	cout << "-----------------------" << endl;

	for (int i = 0; i <= k; i++)
	{
		if (arrayofedges[i]->value == 0)
		{
			delete arrayofedges[i];                      
			for (int j = i + 1; j <= k; j++)
			{
				arrayofedges[j - 1] = arrayofedges[j];
				
			}
			k--;
			i--;
		}
	}


	for (int i = 0; i <= k; i++)
	{
		for (int j = i + 1; j <= k; j++)
		{
			if (arrayofedges[i]->i == arrayofedges[j]->j && arrayofedges[i]->j == arrayofedges[j]->i && arrayofedges[i]->value == arrayofedges[j]->value)
			{
				delete arrayofedges[j];
				for (int p = j + 1; p <= k; p++)
				{
					arrayofedges[p - 1] = arrayofedges[p];
					
				}
				k--;

			}


		}
	}

	for (int i = 0; i <= k; i++)
	{
		cout << "( " << arrayofedges[i]->i << " ; " << arrayofedges[i]->j << " ) " << arrayofedges[i]->value << endl;
	}

	quicksort(arrayofedges, k);
	
	cout << "---------------------" << endl;
	for (int i = 0; i <= k; i++)
	{
		cout << "( " << arrayofedges[i]->i << " ; " << arrayofedges[i]->j << " ) " << arrayofedges[i]->value << endl;
	}


	system("pause");
}

void shakersort()
{
	function<int(int, int)> funct;
	int number;
	cout << "Enter the number of vertices" << endl;
	cin >> number;
	
	edarrp* arrayofvertices = new edarrp[number];
	
	for (int i = 0; i < number; i++)
	{
		cout << "Enter coordinates of the vertice" << endl;
		arrayofvertices[i] = new edarr;

		cin >> arrayofvertices[i]->i;
		cin >> arrayofvertices[i]->j;
		arrayofvertices[i]->value = funct(arrayofvertices[i]->i, arrayofvertices[i]->j);
	}
	
	for (int i = 0; i < number; i++)
	{
		for (int j = i + 1; j < number; j++)
		{
			if (arrayofvertices[j - 1]->value > arrayofvertices[j]->value)
			{
				edarrp temporary = arrayofvertices[j];
				arrayofvertices[j] = arrayofvertices[j - 1];
				arrayofvertices[j - 1] = temporary;
			}
		}

	}
	for (int i = number - 1; i > 0; i++)
	{
		if(arrayofvertices[i - 1]->value > arrayofvertices[i]->value)
		{
			edarrp temporary = arrayofvertices[i];
			arrayofvertices[i] = arrayofvertices[i - 1];
			arrayofvertices[i - 1] = temporary;
		}
	}

}

void mergesort(edarrp arrayofedges[], int number)
{
	if (number > 1)
	{
		int l = number / 2;
		int r = number - l;
		edarrp* left = new edarrp[l];
		edarrp*right = new edarrp[r];
		for (int i = 0; i < number; i++)
		{
			if (i < l)
				left[i] = arrayofedges[i];
			else
				right[i - l] = arrayofedges[i];

		}

		mergesort(left, l);
		mergesort(right, r);

		int i = 0, j = 0;

		while (i < l || j < r)
		{
			if (i < l && j < r)
			{
				if (left[i]->value < right[j]->value)
				{
					arrayofedges[i + j] = left[i];
					i++;
				}
				else
				{
					arrayofedges[i + j] = right[j];
					j++;
				}
			}
			else if (i < l)
			{
				arrayofedges[i + j] = left[i];
				i++;
			}
			else if (j < r)
			{
				arrayofedges[i + j] = right[j];
				j++;
			}


		}

		delete[] left;
		delete[] right;
	}



}

void middleofanedge()
{
	function<int(int, int)> funct;
	int number;
	cout << "Enter the number of edges" << endl;
	cin >> number;

	edarrp* arrayofedges = new edarrp[number];

	for (int i = 0; i < number; i++)
	{
		cout << "Enter coordinates of the vertice" << endl;
		arrayofedges[i] = new edarr;

		cin >> arrayofedges[i]->i;
		cin >> arrayofedges[i]->j;
		cin >> arrayofedges[i]->i2;
		cin >> arrayofedges[i]->j2;

		int midi = (arrayofedges[i]->i + arrayofedges[i]->i2) / 2;
		int midj = (arrayofedges[i]->j + arrayofedges[i]->j2) / 2;

		arrayofedges[i]->value = funct(midi, midj);
	}

	mergesort(arrayofedges, number);

}

void addtoanarray(areap  massoftriangles [], areap massofareas[],int* n, int parents [], int k, int vertice)
{
	int check = 0;
	int array1[3];
	int array2[3];
	array1[0] = vertice;
	array1[1] = k;
	array1[2] = parents[k];
	for (int i = 0; i < 3; i++)
	{
		for(int j=i+1; j<3; j++)
			if (array1[i] > array1[j])
			{
				int temp = array1[i];
				array1[i] = array1[j];
				array1[j] = temp;
			}
	}
	
	

	if (*n != -1)
	{
		for (int i = 0; i <= *n; i++)
		{
			array2[0] = massofareas[i]->i;
			array2[1] = massofareas[i]->j;
			array2[2] = massofareas[i]->k;
			for (int f = 0;  f< 3; f++)
			{
				for (int j = f + 1; j < 3; j++)
					if (array2[f] > array2[j])
					{
						int temp = array2[f];
						array2[f] = array2[j];
						array2[j] = temp;
					}
			}

			if (array1[0] == array2[0] && array1[1] == array2[1] && array1[2] == array2[2])
				check++;

		}
		


	}
	if (check == 0)
	{
		*n += 1;
		massofareas[*n] = new area;
		massofareas[*n]->i = vertice;
		massofareas[*n]->j = k;
		massofareas[*n]->k = parents[k];

		float length1, length2, length3;
		length1 = sqrt(pow(massoftriangles[vertice]->i - massoftriangles[k]->i, 2) + pow(massoftriangles[vertice]->j - massoftriangles[k]->j, 2));
		length2 = sqrt(pow(massoftriangles[k]->i - massoftriangles[parents[k]]->i, 2) + pow(massoftriangles[k]->j - massoftriangles[parents[k]]->j, 2));
		length3 = sqrt(pow(massoftriangles[parents[k]]->i - massoftriangles[vertice]->i, 2) + pow(massoftriangles[parents[k]]->j - massoftriangles[vertice]->j, 2));

		float p = (length1 + length2 + length3) / 2;
		p = sqrt(p * (p - length1) * (p - length2) * (p - length3));
		massofareas[*n]->value = p;
	}

}

void shellsort(int number, rowp matrixrow, rowp firstrow)
{
	columnp matrixcolumn = NULL;
	areap* massoftriangles = new areap[number];                  //coordinates of vertices
	areap* massofareas = new areap[number];
	for (int i = 0; i < number; i++)                                     //saving coordinates of vertices
	{
		massoftriangles[i] = new area;
		cout << "Enter the coordinates of the vertice " << i << endl;
		cin >> massoftriangles[i]->i;
		cin >> massoftriangles[i]->j;
		massoftriangles[i]->k = -1;


	}
	int n = -1;                                                              //counter for massive of areas

	for (int i = 0; i < number; i++)                //searching for cycles 
	{

		int* parents = new int[number];
		for (int j = 0; j < number; j++)
			parents[j] = -1;

		bool* isvisited = new bool[number];
		for (int j = 0; j < number; j++)
			isvisited[j] = 0;

		isvisited[i] = 1;

		qp queueelement = new q;
		queueelement->i = i;
		qp firstinqueue = queueelement;

		while (firstinqueue != NULL)
		{
			int x = firstinqueue->i;                        //take out the first element from the queue
			
			qp temporary = firstinqueue->next;
			delete firstinqueue;
			firstinqueue = temporary;
			if (firstinqueue == NULL)
				queueelement = NULL;

			matrixrow = firstrow;

			while (matrixrow != NULL && matrixrow->i != x )
				matrixrow = matrixrow->next;


			matrixcolumn = matrixrow->column;
			int vertice = -1;
			while (matrixcolumn != NULL)
			{
				while(matrixcolumn!= NULL && (matrixcolumn->j==x || matrixcolumn->value==0))
					matrixcolumn = matrixcolumn->next;

				if (matrixcolumn == NULL)
					break;

				vertice = matrixcolumn->j;

				if (matrixcolumn->j != x && isvisited[vertice]==0)
				{

					 
					matrixcolumn = matrixcolumn->next;

					isvisited[vertice] = 1;
					parents[vertice] = x;
					if (queueelement != NULL)
					{
						queueelement->next = new q;
						queueelement = queueelement->next;
						queueelement->i = vertice;
						
					}
					else
					{
						queueelement = new q;
						queueelement->i = vertice;
						firstinqueue = queueelement;
					}
				}
				else
				{
					if (parents[vertice] != x && parents[x] != vertice)
					{
						int count = -1;                                   //change to 0
						for (int k = x; k != -1;)
						{
							k = parents[k];
							count++;
						}

						for (int k = vertice; k != -1;)                      //maybe delete
						{
							k = parents[k];
							count++;
						}

						if (count == 3)
						{
							cout << vertice << " ";                     //delete
							for (int k = x; k != -1;)
							{
								cout << k << "  ";
								k = parents[k];

							}
							cout << endl;
							addtoanarray(massoftriangles, massofareas, &n, parents, x, vertice);
						}
					}

					matrixcolumn = matrixcolumn->next;
				}

			

			}


		}
		





	}
	
	for (int i = 0; i < number; i++)
	{
		delete massoftriangles[i];
	}
	delete[] massoftriangles;

	cout << "--------------------------" << endl;                        //delete
	for (int i = 0; i <= n; i++)
	{
		cout << massofareas[i]->i << " " << massofareas[i]->j << " " << massofareas[i]->k << " " << massofareas[i]->value << endl;


	}

	for (int i = n/2; i>=1; i/=2)
	{
		for (int j=i; j<=n; j++)
		{
			for (int k = j; k >= i && massofareas[k - i]->value > massofareas[k]->value; k -= i)
			{
				areap temp = massofareas[k - i];
				massofareas[k - i] = massofareas[k];
				massofareas[k] = temp;

			}


		}




	}

	cout << "--------------------------" << endl;                        //delete
	for (int i = 0; i <= n; i++)
	{
		cout << massofareas[i]->i << " " << massofareas[i]->j << " " << massofareas[i]->k << " " << massofareas[i]->value << endl;


	}



	system("pause");
}

int main()
{
	char choice='y';

	rowp matrixrow = NULL; 
	rowp firstrow = NULL;

	FILE* f1;
	fopen_s(&f1, "matrix.txt", "r");
	fseek(f1, 0, SEEK_SET);

	int i = 0, j = -1, value = 0;
	while (!feof(f1))
	{
		choice = fgetc(f1);
		if (feof(f1))
			break;
		if (choice > 47 && choice < 58)
		{
			value = 0;
			while (choice != 32 && choice != '\n' && !feof(f1))              //reading the weight of the edge
			{
				value = value * 10 + choice - '0';
				choice = fgetc(f1);
			}
			j++;
			
			addvalue(&matrixrow, &firstrow, i, j, value);
		}

		if (choice == '\n')
		{
			i++;
			j = -1;
		}

	}

	int number = 0;
	matrixrow = firstrow;

	while (matrixrow != NULL)
	{
		number++;                                              // number of vertices
		matrixrow = matrixrow->next;
	}

	choice = 'y';
	while (choice == 'y')
	{
		cout << "Choose the function" << endl;
		choice = _getch();
		if (cin.fail())
		{
			cin.ignore(cin.rdbuf()->in_avail());
			cin.clear();

		}

		switch (choice)
		{
		case('1'):
			insertionsort(matrixrow, firstrow, number);
				break;
		case('2'):
			bubblesort(matrixrow, firstrow, number);
			break;

		case ('3'):
			shakersort();
			break;

		case('4'):
			sortbylengthoftheedges( matrixrow,  firstrow, number);
				break;
		case ('5'):
			middleofanedge();
			break;
		case ('6'):
			shellsort(number, matrixrow, firstrow);
			break;

		}
		system("cls");
		cout << "Do you want to continue? y - yes, n - no" << endl;
		choice = _getch();
		if (cin.fail())
		{
			cin.ignore(cin.rdbuf()->in_avail());
			cin.clear();

		}
	}
	return 0;
}

/*
0 12 32 24
12 0 11 10
32 11 0 65
24 10 65 0
*/

/*
0 0 32 24
12 0 0 10
32 11 0 65
0 10 0 0
*/
