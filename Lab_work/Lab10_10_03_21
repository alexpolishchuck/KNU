#include <iostream>
#include <math.h>
#include "conio.h"

using std::cin;
using std::cout;
using std::endl;

typedef struct mystack
{
	char sign='_';
	char op[10]="\0";
	
	mystack* prev = NULL;
}*stp,st;

typedef struct treenode
{
	char value='0';
	char value2[10];
	treenode* right;
	treenode* left;
	float calculate = 0;


} *treep ,tree;

typedef struct mytreestack
{
	mytreestack* prev;
	treep node;

}*trstp,trst;

bool checkprecedence(char line[100],int i, stp stackelement)          //change i
{
	int stackvalue = 0;
	int linevalue = 0;

	switch (stackelement->sign)
	{
	case ('-'):
		stackvalue = 1;
		break;
	case ('+'):
		stackvalue = 1;
		break;
	case ('*'):
		stackvalue = 2;
		break;
	case ('/'):
		stackvalue = 2;
		break;
	case ('^'):
		stackvalue = 3;
		break;
	}

	switch (line[i+2])
	{
	case ('-'):
		linevalue = 1;
		break;
	case ('+'):
		linevalue = 1;
		break;
	case ('*'):
		linevalue = 2;
		break;
	case ('/'):
		linevalue = 2;
		break;
	case ('^'):
		linevalue = 3;
		break;
	}
	if (stackvalue - linevalue < 0)
		return false;
	else return true;
}                           //change i                                    

void toppop(stp* stackelement, char rpnline[100],int* j)            //maybe delete *
{
stp* switchtoprev=new stp;  
*switchtoprev = (*stackelement)->prev;

rpnline[*j] = (*stackelement)->sign;
(*j)++;
rpnline[*j] = 32;
(*j)++;
delete (*stackelement);
*stackelement = new st;

if ((*switchtoprev) == NULL)
*stackelement = NULL;
else

	*stackelement = (*switchtoprev);




}

void popornot(stp* stackelement, char rpnline[100], int* j,stp* previous,char line[100],int *i)
{
	
	if ((*stackelement) != NULL && checkprecedence(line, *i, *stackelement))
	{
		toppop(stackelement, rpnline, j);
		if ((*stackelement) == NULL || (*stackelement)->sign == '_')
		{
			(*stackelement) = NULL;
			*previous = NULL;                                                 //maybe delete
		}
		else
			(*previous) = (*stackelement);                       //maybe delete changing previous after changing element
		popornot(stackelement, rpnline, j, previous, line, i);
	}


}

void unloadinbrackets(stp* stackelement, char rpnline[100], int* j)
{
	stp* switchtoprev = new stp;
	
	while ((*stackelement)->sign!='(')
	{
		
		if ((*stackelement) == NULL || (*stackelement)->sign=='(')
			break;
		*switchtoprev = (*stackelement)->prev;
		rpnline[*j] = (*stackelement)->sign;
		(*j)++;
		rpnline[*j] = 32;
		(*j)++;
		delete (*stackelement);
		(*stackelement) = new st;
		(*stackelement) = (*switchtoprev);
		//check 1 + 2 * 4 * 8 * 9 + 5 * 6 + 7

	}
	if ((*stackelement)->sign == '(')
	{
		*switchtoprev = (*stackelement)->prev;
		delete (*stackelement);
		(*stackelement) = new st;
		(*stackelement) = (*switchtoprev);
	}


}

bool isinline(char variables[100], char ch,int j)
{
	
	for (int i = 0; i<j; i++)
	{
		if (ch == variables[i])
			return true;


	}

	return false;
}

void changevariables(char line[100])
{
	char ch='0',ch1='0';
	int j = 0;
	char variables[100];
	
	for (int i = 0; ch != '\0'; i++)
	{
		ch = line[i];
		if (ch == '\0')
			break;
		if (ch == 'l' && line[i + 1] == 'o' && line[i + 2] == 'g')
		{
			i = i + 3;
			ch = line[i];
		}
		if (ch != 32 && (ch > 57 || ch < 48) && ch != 'e' && ch != ',' && ch != '+' && ch != '^' && ch != '*' && ch != '/' && ch != '(' && ch != ')' && ch != '-')
		{
			if (!isinline(variables, ch, j))
			{
				variables[j] = ch;
				j++;
			}


		}


	}
	variables[j] = '\0';
	
	for ( j = 0; variables[j] != '\0'; j++)
	{
			cout << "Enter the value of the " << variables[j] << " variable: " << endl;
			ch = _getch();
			if (cin.fail())
			{
				cin.ignore(cin.rdbuf()->in_avail());
				cin.clear();
			}
			
			for (int i = 0; line[i] != '\0'; i++)
			{
				
				if (line[i] == variables[j])
					line[i] = ch;

			}
	}
	
	cout << "---------------------" << endl;
	cout << line << endl;
}

treep createtree(char rpnline[100]);

void showtree(treep treenode)
{
	if ((treenode->left)->value >= 48 && (treenode->left)->value <= 57 || (treenode->left)->value == 'e')
	{
		if ((treenode->left)->value == 48)
		{

			for (int i = 0; (treenode->left)->value2[i] != '\0';i++)
				cout << (treenode->left)->value2[i];
			cout << " ";
		}
		else
		{
			cout<<(treenode->left)->value;
			cout << " ";
		}
		cout << treenode->value;
		cout << " ";

	}
	else
	{
		(showtree(treenode->left));
		cout << treenode->value;
		cout << " ";
	}
	if ((treenode->right)->value >= 48 && (treenode->right)->value <= 57 || (treenode->right)->value == 'e')
	{
		if ((treenode->right)->value == 48)
		{

			for (int i = 0; (treenode->right)->value2[i] != '\0';i++)
				cout << (treenode->right)->value2[i];

			cout << " ";
		}
		else
		{
			cout << (treenode->right)->value;
			cout << " ";
		}


	}
	else (showtree(treenode->right));

}

void transformintofloat(treep* treenode)
{
	if ((*treenode)->value > 48 && (*treenode)->value <= 57) 
		(*treenode)->calculate = (*treenode)->value - '0';
	
	if ((*treenode)->value == 'e')
		(*treenode)->calculate = 2.7;

	if ((*treenode)->value == '0')
	{
		int number1 = 0, number2 = 0;
		if ((*treenode)->value2[0] == 'l')                                    //log
		{

			for (int i = 0; (*treenode)->value2[i] != '\0'; i++)
				if ((*treenode)->value2[i] > 48 && (*treenode)->value2[i] <= 57 && number1 == 0)
					number1 = (*treenode)->value2[i] - '0';
				else if ((*treenode)->value2[i] > 48 && (*treenode)->value2[i] <= 57 && number2 == 0)
					number2 = (*treenode)->value2[i] - '0';
			(*treenode)->calculate = log(number2) / log(number1);
		}
		if ((*treenode)->value2[0] == '-')
		{
			if ((*treenode)->value2[1] == 'l')                                    // -log()
			{

				for (int i = 0; (*treenode)->value2[i] != '\0'; i++)
					if ((*treenode)->value2[i] > 48 && (*treenode)->value2[i] <= 57 && number1 == 0)
						number1 = (*treenode)->value2[i] - '0';
					else if ((*treenode)->value2[i] > 48 && (*treenode)->value2[i] <= 57 && number2 == 0)
						number2 = (*treenode)->value2[i] - '0';
				(*treenode)->calculate = 0 - log(number2) / log(number1);
			}
			if((*treenode)->value2[1] == 'e')
				(*treenode)->calculate = 0 - 2.7;
			if ((*treenode)->value2[1] > 48 && (*treenode)->value2[1] <= 57)
				(*treenode)->calculate = 0 - ((*treenode)->value2[1] - '0');                //   -log(x,y)???

		}

	}
}

void calculatevalue(treep* treenode, treep left, treep right)
{
	float Lnumber = 0;
	float Rnumber = 0;
	if (left->value >= 48 && left->value <= 57 || left->value == 'e')
		transformintofloat(&left);
		Lnumber = left->calculate;

		if (right->value >= 48 && right->value <= 57 || right->value == 'e')
			transformintofloat(&right);
		Rnumber = right->calculate;

		switch ((*treenode)->value)
		{
		case '+':
			(*treenode)->calculate = Lnumber + Rnumber;
			break;
		case '-':
			(*treenode)->calculate = Lnumber - Rnumber;
			break;
		case '*':
			(*treenode)->calculate = Lnumber * Rnumber;
			break;
		case '/':
			(*treenode)->calculate = Lnumber / Rnumber;
			break;
		case '^':
			(*treenode)->calculate = pow(Lnumber,Rnumber);
			break;
		}


}

void calculatetree(treep treenode)
{
	if ((treenode->left)->value < 48 || (treenode->left)->value > 57 && (treenode->left)->value != 'e')
		calculatetree(treenode->left);
		
	
	if ((treenode->right)->value < 48 || (treenode->right)->value > 57 && (treenode->right)->value != 'e')
		calculatetree(treenode->right);

	calculatevalue(&treenode, treenode->left, treenode->right);

	/*cout << endl;
	cout << treenode->calculate ;*/
}

void createrpn(char line[100])
{
	stp previous = new st;
	previous = NULL;
	stp stackelement = new st;
	
	stackelement = NULL;
	char rpnline[100];
	char ch='0';
	//char check;                                                //to check binar minus
	int i = 0;
	int j = 0;
	while (ch != '\0')
	{
		ch = line[i];
		if (ch == '\0')
		{
			rpnline[j] = ch;
			break;
		}

		
		if (ch <= 57 && ch >= 48 || ch=='e' || (ch == 'l' && line[i + 1] == 'o' && line[i + 2] == 'g') || (ch == '-' && line[i + 1] != 32))
		{
			if (ch == '-' && line[i + 1] != 32)  //binar minus
			{

				rpnline[j] = ch;
				j++;
				i++;
				ch = line[i];

			}
			if (ch == 'l' && line[i + 1] == 'o' && line[i + 2] == 'g')      //read log(x,y)
			{
				while (ch != 32 && ch != '\0')
				{
					rpnline[j] = ch;
					j++;
					i++;
					ch = line[i];
				}
				rpnline[j] = 32;
				j++;
				i--;
				ch = line[i];
			}
			else 
			{
				rpnline[j] = ch;
				j++;
				rpnline[j] = 32;
				j++;
			}
			if (line[i + 1] != '\0' && line[i + 2] != ')')
				popornot(&stackelement, rpnline, &j, &previous, line, &i);           

			else if (line[i + 2] == ')')                                            //operation for closed brackets;
			{                                                                       
				while (line[i + 2] == ')')
				{
					unloadinbrackets(&stackelement, rpnline, &j);
					i = i + 2;
				}
				if (line[i + 1] != '\0' && line[i + 2] != ')')
				popornot(&stackelement, rpnline, &j, &previous, line, &i);
			}                                                                 

			if (stackelement!= NULL && stackelement->sign == '_')
			{
				stackelement = NULL;
				previous = NULL;                                                 
			}
			
		}


		if ( ch == '+' || ch == '^' || ch == '*' || ch == '/' || ch=='(')            //check minus
		{       
			previous = stackelement;                                           
			if (stackelement == NULL)
				delete stackelement;
			stackelement = new st;
			stackelement->sign = ch;
			stackelement->prev = previous;
			previous = stackelement;
		}

		if (ch == '-' && line[i + 1] == 32)
		{
			if (stackelement == NULL)                                  
				delete stackelement;
			stackelement = new st;
			stackelement->sign = ch;
			stackelement->prev = previous;
			previous = stackelement;
		}

		
	   
		i++;
		
	}
	while (stackelement != NULL)
	{
		if (stackelement == NULL)
			break;
		rpnline[j] = stackelement->sign;
		j++;
		rpnline[j] = 32;
		j++;
		stackelement = stackelement->prev;
		

	}
	j--;
	rpnline[j] = '\0';
	cout << rpnline << endl;

	treep treenode;
	treenode = createtree(rpnline);
	showtree(treenode);
	calculatetree(treenode);
	cout <<endl << treenode->calculate << endl;
}

void pushtreestack(trstp* treestackelement, trstp* previous, treep* treenode)
{
	(*previous) = (*treestackelement);
	(*treestackelement) = new trst;
	
	(*treestackelement)->node = (*treenode);
	(*treestackelement)->prev = (*previous);

}

treep createtree(char rpnline[100])
{
	trstp treestackelement = new trst;
	treestackelement = NULL;
	trstp previous = new trst;
	previous = NULL;
	treep treenode;

	treep pop1;
	treep pop2;

	char ch;

	for (int i = 0; rpnline[i] != '\0'; i++)
	{
		ch = rpnline[i]; 

		if (ch == 'l' && rpnline[i + 1] == 'o' && rpnline[i + 2] == 'g')      //read log(x,y)
		{
			treenode = new tree;
			int j = 0;
			while (ch != 32 && ch != '\0')
			{
				treenode->value2[j] = ch;
				i++;
				j++;
				ch = rpnline[i];
			}
			treenode->value2[j] = '\0';
			treenode->left = NULL;
			treenode->right = NULL;
			pushtreestack(&treestackelement, &previous, &treenode);
		}

		if (ch <= 57 && ch >= 48 || ch == 'e')
		{
			treenode = new tree;
			treenode->value = ch;
			treenode->left = NULL;
			treenode->right = NULL;

			pushtreestack(&treestackelement, &previous, &treenode);
		}


		if (ch == '+' || ch == '^' || ch == '*' || ch == '/' || ch == '(')            //check minus
		{
			pop1 = treestackelement->node;
			pop2 = (treestackelement->prev)->node;

			treenode = new tree;

			treenode->left = pop2;
			treenode->right = pop1;
			treenode->value = ch;

			int count = 2;
			while (count)
			{
				previous = treestackelement->prev;
				delete treestackelement;
				treestackelement = new trst;
				treestackelement = previous;
				count--;
			}
			pushtreestack(&treestackelement, &previous, &treenode);
		}

		if (ch == '-' && (rpnline[i + 1] == 32 || rpnline[i + 1] =='\0' ))
		{
			pop1 = treestackelement->node;
			pop2 = (treestackelement->prev)->node;

			treenode = new tree;

			treenode->left = pop2;
			treenode->right = pop1;
			treenode->value = ch;

			int count = 2;
			while (count)
			{
				previous = treestackelement->prev;
				delete treestackelement;
				treestackelement = new trst;
				treestackelement = previous;
				count--;
			}
			pushtreestack(&treestackelement, &previous, &treenode);

		}

		else if (ch == '-' && rpnline[i + 1] != 32)
		{
			treenode = new tree;
			int j = 0;
			while (ch != 32 && ch != '\0')
			{
				treenode->value2[j] = ch;
				i++;
				j++;
				ch = rpnline[i];
			}
			treenode->value2[j] = '\0';
			treenode->left = NULL;
			treenode->right = NULL;
			pushtreestack(&treestackelement, &previous, &treenode);
			

		}

	}
	treenode = treestackelement->node;
	return treenode;
}

int main()
{
	char line[100];
	cin.getline(line, 100);
	if (cin.fail())
	{
		cin.ignore(cin.rdbuf()->in_avail());
		cin.clear();
	}
	changevariables(line);
	createrpn(line);
	
	return 0;
}
//1 + 2 ^ log(2,8) * 4 - 5 ^ ( -1 - -2 )
//1 + -e + log(2,8) ^ ( 1 * e ^ log(2,8) + 3 )
/*digraph G {

node001[label = "-"]
node002[label = "+"]
node003[label = "*"]
node004[label = "^"]
node005[label = "^"]
node006[label = "-"]

node001->node002;
node002 -> "1";
node002->node003;
node003 -> "4"
node003->node004
node004 -> "2"
node004 ->  "log(2,8)"
node001->node005;
node005 -> "5";
node005->node006;
node006 -> "-1";
node006 -> "-2"

}
*/
